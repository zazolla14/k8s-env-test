apiVersion: v1
kind: Secret
metadata:
  name: lnav-ttyd-basic-auth
  namespace: default   # 按需改成你的命名空间
type: Opaque
stringData:
  USERNAME: "admin"        # 改成你的用户名
  PASSWORD: "a2N2Xz8T0uwyaPRd"    # 改成你的强密码
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lnav-ttyd
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lnav-ttyd
  template:
    metadata:
      labels:
        app: lnav-ttyd
    spec:
      containers:
        - name: lnav-ttyd
          # ✅ 使用你构建并推送的自定义镜像（见下方 Dockerfile 章节）
          image: ran7891/lnav-ttyd:amd64
          imagePullPolicy: Always
          env:
            - name: TERM
              value: xterm-256color
            - name: TTYD_USERNAME
              valueFrom:
                secretKeyRef:
                  name: lnav-ttyd-basic-auth
                  key: USERNAME
            - name: TTYD_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: lnav-ttyd-basic-auth
                  key: PASSWORD
          ports:
            - name: http
              containerPort: 7681
          volumeMounts:
            - name: srv-log
              mountPath: "/akachat/server/logs"
            - name: start-script
              mountPath: /usr/local/bin/start-lnavi.sh
              subPath: start-lnavi.sh
          # 运行 ttyd，直接启动 lnav，并打开 /logs
          # 说明：
          # -i 0.0.0.0   监听所有地址
          # -p 7681      端口
          # -c user:pass 基础认证
          # lnav /logs   启动后进入 lnav 并打开 /logs 目录
          command: ["/bin/sh","-lc"]
          args:
            - |
              exec ttyd \
                --writable \
                --check-origin=false \
                -i 0.0.0.0 \
                -p 7681 \
                -c "${TTYD_USERNAME}:${TTYD_PASSWORD}" \
                bash -lc '/usr/local/bin/start-lnavi.sh'
          readinessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 10
            periodSeconds: 20
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
      volumes:
        - name: srv-log
          persistentVolumeClaim:
            claimName: cnfs-nas-pvc
        - name: start-script
          configMap:
            name: lnav-start-script
            defaultMode: 0755
---
apiVersion: v1
kind: Service
metadata:
  name: lnav-ttyd
  namespace: default
spec:
  selector:
    app: lnav-ttyd
  ports:
    - name: http
      port: 80
      targetPort: 7681
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: lnav-ttyd
  namespace: default
  annotations:
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80},{"HTTPS":443}]'
    alb.ingress.kubernetes.io/ssl-redirect: 'true'
    alb.ingress.kubernetes.io/healthcheck-enabled: "true"
    alb.ingress.kubernetes.io/healthcheck-path: "/"
    alb.ingress.kubernetes.io/healthcheck-protocol: "HTTP"
    alb.ingress.kubernetes.io/healthcheck-httpversion: "HTTP1.1"
    alb.ingress.kubernetes.io/healthcheck-method: "HEAD"
    alb.ingress.kubernetes.io/healthcheck-code: "http_4xx"
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '3'
    external-dns.alpha.kubernetes.io/hostname: logf.0dev.cc

spec:
  ingressClassName: alb
  rules:
    - host: logf.0dev.cc
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: lnav-ttyd
                port:
                  number: 80
  tls:
    - hosts:
        - logf.5dev.io

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: lnav-start-script
  namespace: default
data:
  start-lnavi.sh: |
    #!/bin/sh
    echo "============================================"
    echo "  Welcome to the AkaChat Log Viewer"
    echo "  Logs Path: /akachat/server/logs"
    echo "  - In lnav: ':set wrap true' to wrap long lines"
    echo "  - lnav -c \":set wrap true\" /akachat/server/logs"
    echo "  - Press q to quit"
    echo "============================================"
    echo ""
    cd /akachat/server/logs
    exec /bin/zsh